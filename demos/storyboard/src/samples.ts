export type SampleT = { type: ".omd" | ".ojs", content: string };
export const samples: { [key: string]: SampleT } = {
    "Covid-Globe (.omd)": {
        "type": ".omd",
        "content": "\n# Coronavirus (COVID-19) Globe\n\n\nLatest data regarding Corona Virus cases, provided by the [World Health Organization](https://www.who.int/). Available in API form via [https://github.com/NovelCOVID/API](https://github.com/NovelCOVID/API).\n\nPlotted using [globe.gl](globe.gl).\n\n```\nviewof valMode = radio({\n  title: 'Color by',\n  options: [\n    { label: 'Cases', value: 'cases' },\n    { label: 'Cases Today', value: 'todayCases' },\n    { label: 'Deaths', value: 'deaths' },\n    { label: 'Deaths Today', value: 'todayDeaths' },\n    { label: 'Recovered', value: 'recovered' },\n    { label: 'Critical', value: 'critical' }\n  ],\n  value: 'cases'\n})\n\nviewof popRel = checkbox({\n  options: [\n    { value: \"true\", label: \"Relative to population\" }\n  ],\n  value: \"true\"\n})\n\n{\n  const domEl = document.createElement('div');\n  covidGlobe(domEl);\n  covidGlobe.pointOfView({ lat: 32, altitude: 1.8 }, 2000); // tilt globe slightly north\n  \n  return domEl;\n}\n  \n```\n${covidData === cachedCovidData ? '(*using cached data*)' : ''}\n```\n{ // globe configuration\n  // set color domain\n  colorScale.domain([0, Math.max(...covidFeatureData.map(getFeatureVal))]);\n    \n  covidGlobe\n    .width(640)\n    .height(640)\n    .polygonsData(covidFeatureData)\n    .polygonAltitude(0.06)\n    .polygonCapColor(feat => colorScale(getFeatureVal(feat)))\n    .polygonSideColor(() => 'rgba(0, 100, 0, 0.15)')\n    .polygonStrokeColor(() => '#111')\n    .polygonLabel(({ covidData, properties }) => { \n      const capIt = str => str.charAt(0).toUpperCase() + str.slice(1);\n      const relToPop = v => `${d3.format('.2')(v / properties.POP_EST * 100)}%`;\n      const popRatio = v => d3.format('.3~s')(properties.POP_EST / v);\n      const relToCases = v => `${d3.format('.2')(v / covidData.cases * 100)}%`;\n    \n      const formatVal = prop => `<b>${covidData[prop]}</b> ${prop === 'cases' ? `(1 in every ${popRatio(covidData[prop])} ppl)` : covidData[prop] ? `(${relToCases(covidData[prop])} of cases)` : ''}${covidData[prop] && covidData.hasOwnProperty(`today${capIt(prop)}`) ? ` | new today: ${covidData[`today${capIt(prop)}`]}` : ''}`;\n    \n      return`\n      <b>${covidData ? covidData.country : properties.NAME} (${properties.ISO_A2}):</b> <br />\n      ${(!covidData\n        ? [['Cases', 0]]       \n        : [\n            ['Cases', formatVal('cases')],\n            ['Deaths', formatVal('deaths')],\n            ['Recovered', formatVal('recovered')],\n            ['Critical', formatVal('critical')],\n            ['Population', d3.format(\".3s\")(properties.POP_EST)]\n          ]\n        ).map(([label, val]) => `${label}: <i>${val}</i>`)\n         .join('<br />')\n      }\n    ` })\n    .onPolygonHover(hoverD => covidGlobe\n      .polygonAltitude(d => d === hoverD ? 0.12 : 0.06)\n      .polygonCapColor(d => d === hoverD ? 'steelblue' : colorScale(getFeatureVal(d)))\n    )\n    .polygonsTransitionDuration(300);\n}\n\ncovidGlobe = Globe()\n  .height(640)\n  .globeImageUrl('https://cdn.jsdelivr.net/npm/three-globe/example/img/earth-night.jpg')\n  // .backgroundImageUrl('//cdn.jsdelivr.net/npm/three-globe/example/img/night-sky.png')\n\ngetFeatureVal = feat => (feat.covidData? feat.covidData[valMode] : 0) / (popRel ? feat.properties.POP_EST : 1)\n```\n**Style**\n```\nhtml`<style>\n.scene-tooltip {\n  padding: 8px;\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.scene-tooltip:empty {\n  display: none;\n}\n</style>`\n```\n**Settings**\n```\ncolorScale = d3.scaleSequentialPow(d3.interpolateYlOrRd)\n  .exponent(1/4);\n```\n**Data**\n```\ncovidData = fetch(\n  'https://cors-anywhere.herokuapp.com/corona.lmao.ninja/v2/countries', \n  { headers: { 'x-requested-with': 'observablehq.com' }}\n)\n  .then(r => r.json())\n  .catch(() => cachedCovidData) // use cached data if api is unavailable\n\ncachedCovidData = FileAttachment(/* \"covidData-cached@2.json\" */\"https://static.observableusercontent.com/files/61f477377c4aabc49e40014f77f8758e9de4a58e1e1d46bc2303ef6933b5dfb4f92575f5579996306be447936e9fb2bc140e72d8b712b77f8c6cc2472d784b21\").json()\n\ncountryNameMapper = ({\n  'bosnia and herzegovina': 'bosnia and herz.',\n  drc: 'dem. rep. congo',\n  'dominican republic': 'dominican rep.',\n  'ivory coast': 'CÃ´te d\\'Ivoire',\n  's. korea': 'south korea',\n  taiwan: 'Taiwan, Province of China',\n  uae: 'United Arab Emirates',\n  uk: 'United Kingdom',\n  usa: 'United States of America'\n})\n\ncovidFeatureData = {\n  const dataByCountry = indexBy(covidData, d => (countryNameMapper[d.country.toLowerCase()] || d.country).toLowerCase(), false);\n  \n  return countries110m.features\n    .filter(d => d.properties && d.properties.NAME)\n    .map(d => ({\n      ...d,\n      covidData: dataByCountry[d.properties.NAME.toLowerCase()]\n    }));    \n}\n\ncountries110m = fetch('https://unpkg.com/globe.gl/example/datasets/ne_110m_admin_0_countries.geojson').then(r => r.json())\n```\n**Logs**\n```\ncountriesMissingGeoJson = {\n  const dataByCountry = indexBy(covidData, d => (countryNameMapper[d.country.toLowerCase()] || d.country).toLowerCase(), false);\n  const geoJsonCountries = new Set(countries110m.features.map(d => d.properties.NAME.toLowerCase()));\n  \n  return Object.keys(dataByCountry).filter(country => !geoJsonCountries.has(country)).sort();\n}\n\ncountriesMissingData = {\n  const dataByCountry = indexBy(covidData, d => (countryNameMapper[d.country.toLowerCase()] || d.country).toLowerCase(), false);\n  const geoJsonCountries = new Set(countries110m.features.map(d => d.properties.NAME.toLowerCase()));\n  \n  return [...geoJsonCountries].filter(country => !dataByCountry.hasOwnProperty(country)).sort();\n}\n```\n**Dependencies**\n```\nGlobe = require('globe.gl@2.8.6')\n\nindexBy = require('index-array-by')\n\nd3 = require('d3')\n\nimport {radio, checkbox} from '@jashkenas/inputs'\n```"
    },
    "Data-Wrangler (.omd)": {
        "type": ".omd",
        "content": "\n---\n```\nWrangler(data)\n``` \n---\n```\n// Function to wrangle data\nWrangler = (data = [], data2 = []) => {\n  // Keep track of all the inputs\n  let inputs = [];\n\n  // Set up the three panels for the UI\n  let wrapper = html`<div class=\"wrangler\">`;\n  let wrangler_container = html`<div class=\"wrangler_container\">`;\n  let right_panel = html`<div class=\"right_panel\"><div class=\"section_header\">Transformations Applied</div></div>`;\n  let left_panel = html`<div class=\"left_panel\">`;\n  let bottom_panel = html`<div class=\"bottom_panel\">`;\n  wrangler_container.appendChild(left_panel);\n  wrangler_container.appendChild(right_panel);\n  wrapper.appendChild(wrangler_container);\n  wrapper.appendChild(bottom_panel);\n\n  // Function to add an operation (callback for the render_operations_panel)\n  const addOperation = (operation) => {\n    // Get current state of data and columns for building next input\n    let data, cols;\n    if (operation.includes(\"join\")) {\n      data = [wrapper.value.data.objects(), data2];\n      cols = data.map(get_cols);\n    } else {\n      data = wrapper.value.data.objects();\n      cols = get_cols(data);\n    }\n\n    const id = id_generator();\n\n    // Get default value\n    const value = operations[operation].get_default_value\n      ? operations[operation].get_default_value(cols, data)\n      : [cols[0].label];\n\n    const options = operation === \"filter\" ? { data } : {};\n    inputs.push({ id, cols, value, options, type: operation });\n    update_inputs();\n  };\n\n  const update_wrapper_value = (value) => {\n    wrapper.value = value;\n    wrapper.dispatchEvent(new Event(\"input\", { bubbles: true }));\n  };\n\n  // Update inputs panel\n  const update_inputs = () => {\n    right_panel.replaceChild(\n      render_inputs_panel(inputs, update_code_and_results),\n      right_panel.querySelector(\".inputs_wrapper\")\n    );\n  };\n\n  // Update coee and results\n  const update_code_and_results = (updated_inputs) => {\n    inputs = updated_inputs;\n    const expression = get_code_expression(inputs);\n    right_panel.replaceChild(\n      render_code_panel(expression),\n      right_panel.querySelector(\".code_wrapper\")\n    );\n\n    bottom_panel.replaceChild(\n      render_results_panel(expression, data, data2, update_wrapper_value),\n      bottom_panel.querySelector(\".results_wrapper\")\n    );\n  };\n\n  // Append the initial state\n  left_panel.appendChild(\n    html`${render_operations_panel(operations, addOperation)}`\n  );\n  right_panel.appendChild(\n    html`${render_inputs_panel(inputs, update_code_and_results)}`\n  );\n\n  right_panel.appendChild(html`${render_code_panel(get_code_expression(inputs))}`);\n  bottom_panel.appendChild(html`${render_results_panel(\"data\", data, data2)}`);\n\n  wrapper.value = { data: aq.from(data), code: \"\" }; // initial value\n\n  // Append styles\n  wrapper.appendChild(make_styles());\n  return wrapper;\n}\n\n// Render the panel displaying available operations, firing a callback function on click\nrender_operations_panel = (operations = [], callback = () => null) => {\n  // Visual elements\n  const wrapper = html`<div class=\"operations_wrapper\">`;\n  const search = html`<form style=\"display:block;\"><input style=\"text-align:left;\" name=\"op_search\" type=\"text\" class=\"inline\" placeholder=\"Search operations...\" /></form>`;\n\n  // Search through operations\n  search.oninput = () => {    \n    const value = search.op_search.value.toLowerCase();\n    const filtered_operations = {};\n    Object.keys(operations)\n      .filter(\n        (d) =>\n          d.includes(value) ||\n          operations[d].description?.includes(value) ||\n          operations[d].type?.includes(value)\n      )\n      .forEach((d) => (filtered_operations[d] = operations[d]));\n    left_panel.replaceChild(\n      OperationsMenu(filtered_operations, callback),\n      left_panel.querySelector(\".menu_wrapper\")\n    );    \n  };\n\n  const left_panel = html`<div class=\"left_panel\">\n    <div class=\"section_header\">\n      Data Wrangler\n      <span class=\"docs_link\">\n        <a style=\"text-decoration:none;\" href=\"https://uwdata.github.io/arquero/api/verbs\" target=\"_blank\"><span style=\"vertical-align:top;line-height:1.6;\">${make_docs_icon()}</span><span style=\"vertical-align:top;line-height:1.6;\">Docs</span></a>     \n    </span>\n  </div>\n  ${search}\n  <div class=\"menu_wrapper\" />\n</div>`;\n\n  search.oninput();\n  wrapper.appendChild(left_panel);\n  return wrapper;\n}\n\n// Render the formatted code, including a button to copy it\nrender_code_panel = (expression = \"\") => {\n  // Panel to contain the transformations and code\n  const comment = `// To use copied code replace \"data\" with your own variable\\n`;\n\n  const end = `\\n\\t// Call \".objects()\" to return an array of objects`;\n  \n  const wrapper = html`\n    <div class=\"code_wrapper\">\n      <div class=\"section_header\" style=\"display:block;border-bottom:none\">Code \n        <div class=\"code_instructions\">\n          <span>Copy into a cell to save work</span>\n          ${copy_code_button(comment + expression + end)}\n        </div>\n      </div>\n      ${format_code(comment + expression)}\n  </div>`;\n\n  return wrapper;\n}\n\nrender_results_panel = (expression, data, data2, callback = () => null) => {\n  const wrapper = html`<div class=\"results_wrapper\"><div class=\"section_header\">Results</div></div>`;\n  // Update the displayed data\n  let wrangled_data;\n  let err_message;\n  try {\n    wrangled_data = evaluate(\"return \" + expression, { data, aq, op, data2 });\n  } catch (err) {\n    err_message = display_error(err);\n  }\n\n  // Passing an error if there are no results\n  if (!data.length) err_message = display_error({ message: \"No results\" });\n\n  // Display the error or results\n  let results;\n  if(err_message) {\n    results = err_message\n  } else {\n    results = Inputs.table(wrangled_data, { height: 150});\n    // Set a minimum width to the table for mobile\n    results.appendChild(html`<style>table {min-width: ${Object.keys(data[0]).length * 75}px}</style>`)\n  }\n  \n  wrapper.appendChild(results);\n\n  // Use a callback to set the value of the parent\n  callback({ data: wrangled_data, code: expression });\n  return wrapper;\n}\n\n// Accepts an array of inputs ({id, type, cols, options})\nrender_inputs_panel = (inputs = [], callback = () => null) => {\n  // Panel to contain the transformations and code\n  const wrapper = html`<div class=\"inputs_wrapper\">  \n</div>`;\n\n  const inputs_wrapper = html`<div class=\"event_form\" style=\"height: 300px;display: inline-block;font:var(--sans-serif); padding-bottom:5px; \" />`;\n\n  wrapper.append(inputs_wrapper);\n  // Prompt to add operations\n  const prompt = html`<div class=\"prompt_action\">Add transformations using the list&nbsp;<span class=\"hide_large\">above</span><span class=\"hide_small\">to the left</span>.</div>`;\n\n  const clear = html`<div class=\"clear_button\">Clear all</div>`;\n  clear.onclick = () => {\n    inputs = [];\n    callback(inputs);\n    inputs_wrapper.innerHTML = \"\";\n    inputs_wrapper.appendChild(prompt);\n  };\n  // Event for the form (when events are deleted or changed through the UI itself)\n  inputs_wrapper.oninput = (trigger) => {\n    // If there aren't any inputs, prompt the user to create inputs\n    if (inputs?.length === 0) {\n      inputs_wrapper.appendChild(prompt);\n      inputs_wrapper.removeChild(clear);\n    }\n    // Update the inputs array if the event comes from dragging (reorders them)\n    if (trigger?.type === \"drag\") inputs = trigger.inputs;\n    // Otherwise, get id and value of form, update the inputs array\n    else if (trigger.target?.form?.id) {\n      const id = trigger.target.form.id;\n      const value = trigger.target.form.value;\n      const index = inputs.findIndex((d) => d.id === id);\n      inputs[index].value = value;\n    }\n    // Run callback function (to pass information to parent)\n    callback(inputs);\n  };\n\n  // Draw the initial state (prompt or inputs)\n  if (inputs?.length) {\n    render_inputs(inputs, inputs_wrapper);\n    inputs_wrapper.appendChild(clear);\n  } else inputs_wrapper.appendChild(prompt);\n\n  return wrapper;\n}\n\n// Function to make draggable inputs inside of a wrapper\nrender_inputs = (input_arr, wrapper) => {\n  function redraw(data) {\n    d3.select(wrapper)\n      .selectAll(\".item\")\n      .data(data, (d) => d.id)\n      .join(\"div\")\n      .selectAll(\"span\")\n      .style(\"transform\", `translate(0px, 0px)`);\n\n    // Fire an event on the parent\n    wrapper.oninput({ type: \"drag\", inputs: data });\n  }\n\n  function dragged(event, d) {\n    const parent = this.parentNode; // wrapper span around the hamburger menu\n    const nextSiblingY = parent.parentNode.nextElementSibling?.offsetTop;\n    const y = parent.offsetTop;\n    const prevSiblingY = parent.parentNode.previousElementSibling?.offsetTop;\n\n    // Move all the child nodes\n    d3.select(parent) // content\n      .selectAll(function () {\n        return parent.childNodes;\n      })\n      .style(\"transform\", `translate(0px, ${event.y - this.offsetTop - 10}px)`);\n\n    // Shift up or down\n    if (y + event.y > nextSiblingY || y + event.y < prevSiblingY) {\n      const index = input_arr.findIndex((ele) => ele.id === d.id);\n      const new_pos = y + event.y > nextSiblingY ? index + 1 : index - 1;\n      input_arr.splice(new_pos, 0, input_arr.splice(index, 1)[0]);\n      redraw(input_arr);\n    }\n  }\n\n  function dragended(event, d) {\n    redraw(input_arr);\n  }\n\n  const drag = d3.drag().on(\"drag\", dragged).on(\"end\", dragended);\n\n  const divs = d3\n    .select(wrapper)\n    .selectAll(\"div\")\n    .data(input_arr, (d) => d.id)\n    .join(\n      (enter) => {\n        const divs = enter.append(\"div\").attr(\"class\", \"item\");\n\n        // Content\n        const content = divs\n          .append(\"span\")\n          .style(\"display\", \"inline-block\")\n          .style(\"transform\", `translate(0px, 0px)`)\n          .style(\"width\", \"100%\")\n          .attr(\"class\", \"content\");\n\n        // Hamburger icons\n        content\n          .append(\"span\")\n          .style(\"vertical-align\", \"top\")\n          .style(\"cursor\", \"pointer\")\n          .style(\"display\", \"inline-block\")\n          .call(drag)\n          .each(function (d) {\n            this.innerHTML = make_hamburger_icon();\n          });\n\n        // Remove icons\n        content\n          .append(\"span\")\n          .attr(\"class\", \"remove\")\n          .text(\"x\")\n          .on(\"click\", (event, value) => {\n            const index = input_arr.findIndex((ele) => ele.id === value.id);\n            input_arr.splice(index, 1);\n            redraw(input_arr);\n          });\n\n        // Craete the visual elements (forms)\n        content.each(function (d) {\n          this.appendChild(\n            html`<span style=\"width:calc(100% - 30px);display:inline-block;\">${operations[\n              d.type\n            ].make_input(d)}</span>`\n          );\n        });\n\n        return divs;\n      },\n      (update) => update,\n      (exit) => exit.remove()\n    );\n  wrapper.dispatchEvent(new Event(\"input\", { bubbles: true }));\n}\n\n// Build the list of operations\nOperationsMenu = (\n  operations = [\"semijoin\"],\n  update = (d) => d,\n  hoverUpdate = (d) => d\n) => {\n  const icon_width = 85;\n  const padding = 15;\n  // const categories = Object.keys(operations)\n  const categories = [\"core\", \"join\", \"reshape\", \"clean\", \"set\"];\n  const wrapper = html`<div class=\"menu_wrapper\">`;\n  categories.forEach((category) => {\n    const ops = Object.keys(operations).filter(\n      (d) => operations[d].type === category\n    );\n    let warning = \"\";\n    if (category === \"join\") {\n      warning = html`<br/><span class=\"type_info\"><em>To join, pass in a second dataset:</em><br/><code>Wrangler(data, data2)</code></span>`;\n    } else if (category === \"reshape\") {\n      warning = html`<br/><span class=\"type_info\"><em>These functions can dramatically increase data size.`;\n    } else if (category === \"set\") {\n      warning = html`<br/><span class=\"type_info\"><em>For sets, pass in a second data set:</em> <code>Wrangler(data, data2)</code></span>`;\n    }\n    const category_wrapper = html`<div style=\"font:13px system-ui,sans-serif;margin-bottom:5px;\">\n          <span style=\"font-size:.875rem;line-height:25px;\">${capitalize(\n            category\n          )} operations</span>\n    ${warning}</div>`;\n\n    ops.forEach((d) => {\n      const value = operations[d];\n      const text = value.description;\n      const control = html`<div class=\"icon_menu_wrapper\">\n        ${icons[d]}\n        <p class=\"icon_info\">\n          <span>${d}\\n</span>\n          <span style=\"opacity:.3; font-size:.7rem;\">${text}</span>\n        </p></div>\n      `;\n      control.onclick = () => update(d);\n    \n      category_wrapper.appendChild(control);\n    });\n    wrapper.appendChild(category_wrapper);\n  });\n  return wrapper;\n}\n\n// List of all operations, including how to build their input, get the syntax, icon, description\noperations = ({\n  select: {\n    make_input: (config) => SelectInput(config),\n    description: \"choose columns\",\n    type: \"core\",\n    get_syntax: (d) => {\n      if (!d.value) return \"\";\n      // Wrap in quotes\n      const quoted_values = d.value.map((d) => `'${d}'`).join(\",\");\n      if (!quoted_values) return \"\";\n      return `.select(${quoted_values})`;\n    }\n  },\n  filter: {\n    make_input: (config) => FilterInput(config),\n    description: \"choose rows\",\n    type: \"core\",\n    get_default_value: (cols, data) => {\n      const comparison_type = cols[0].type === \"categorical\" ? \"match\" : \"gt\";\n      const starter_value =\n        cols[0].type === \"categorical\"\n          ? \"\"\n          : d3.mean(data, (d) => +d[cols[0].label]);\n      return [cols[0].label, comparison_type, starter_value];\n    },\n    get_syntax: (d) => {\n      // Implement this logic better\n      const [col, comparison, value] = d.value;\n      if (value === \"\") return \"\";\n      if (comparison.includes(\"equal\")) {\n        const comparison_symbol = comparison === \"equal\" ? \"===\" : \"!==\";\n        return `.filter(d => d[\"${col}\"] ${comparison_symbol} \"${value}\")`;\n      } else if (comparison === \"match\") {\n        return `.filter(d => op.match(d[\"${col}\"], \"${value}\"))`;\n      } else if (comparison.endsWith(\"with\")) {\n        return `.filter(d => op.${comparison}(d[\"${col}\"], \"${value}\"))`;\n      } else if (comparison === \"lt\" || comparison === \"gt\") {\n        const comparison_symbol = comparison === \"lt\" ? \"<\" : \">\";\n        return `.filter(d => d[\"${col}\"] ${comparison_symbol} ${+value})`;\n      }\n      return \"\";\n    }\n  },\n  orderby: {\n    make_input: (config) => OrderbyInput(config),\n    description: \"sort rows\",\n    type: \"core\",\n    get_syntax: (d) => {\n      const [order_col, order] = d.value;\n      if (order === \"Descending\") {\n        return `.orderby(aq.desc(\"${order_col}\"))`;\n      } else {\n        return `.orderby(\"${order_col}\")`;\n      }\n    }\n  },\n  derive: {\n    make_input: (config) => DeriveInput(config),\n    description: \"add a new column\",\n    type: \"core\",\n    get_default_value: (cols) => [],\n    get_syntax: (d) => {\n      const [col_name, col_value] = d.value;\n      if (!col_name || !col_value) return \"\";\n      return `.derive({${col_name}: d => ${prefixVarsInFormula(col_value)}})`;\n    }\n  },\n  rename: {\n    make_input: (config) => RenameInput(config),\n    description: \"change a column's name\",\n    type: \"core\",\n    get_syntax: (d) => {\n      let [old_name, new_name] = d.value;\n      if (!new_name) return \"\";\n      if (old_name.includes(\" \")) old_name = `\"${old_name}\"`;\n      return `.rename({${old_name}: \"${new_name}\"})`;\n    }\n  },\n  groupby: {\n    make_input: (config) => GroupbyInput(config),\n    description: \"associate rows\",\n    type: \"core\",\n    get_syntax: (d) => {\n      const quoted_groups = d.value.map((d) => `'${d}'`).join(\",\");\n      return `.groupby(${quoted_groups})`;\n    }\n  },\n  rollup: {\n    make_input: (config) => RollupInput(config),\n    description: \"compute column statistics\",\n    type: \"core\",\n    get_default_value: (cols) => [\n      cols.filter((d) => d.type === \"continuous\")[0].label,\n      [\"mean\", \"count\"]\n    ],\n    get_syntax: (d) => {\n      const [summary_col, metrics] = d.value;\n      if (!metrics.length) return \"\";\n      const str = metrics.map((d, i) => {\n        const end = i === metrics.length - 1 ? \"\" : \",\\n\\t\\t\";\n        const arg = d === \"count\" ? `` : `d[\"${summary_col}\"]`;\n        return `${d}:d => op.${d}(${arg})${end}`;\n      });\n      return `.rollup({${str.join(\"\\t\")}})`;\n    }\n  },\n  count: {\n    make_input: (config) => CountInput(config),\n    description: \"count rows\",\n    type: \"core\",\n    get_syntax: () => `.count()`\n  },\n  sample: {\n    make_input: (config) => SampleInput(config),\n    description: \"retrieve random rows\",\n    type: \"core\",\n    get_default_value: () => [10, \"\"],\n    get_syntax: (d) => {\n      const [n_sample, replacement] = d.value;\n      const end = replacement === \"replacement\" ? \", {replace:true})\" : \")\";\n      return `.sample(${n_sample}${end}`;\n    }\n  },\n  slice: {\n    make_input: (config) => SliceInput(config),\n    description: \"retrieve rows by index\",\n    type: \"core\",\n    get_default_value: () => [0, 10],\n    get_syntax: (d) => {\n      const [lower, upper] = d.value;\n      return `.slice(${lower}, ${upper})`;\n    }\n  },\n\n  relocate: {\n    make_input: (config) => RelocateInput(config),\n    description: \"move a column\",\n    type: \"core\",\n    get_default_value: (cols) => [cols[0].label, \"after\", cols[1].label],\n    get_syntax: (d) => {\n      const [selected, position, reference] = d.value;\n      return `.relocate(\"${selected}\", {${position}:\"${reference}\"})`;\n    }\n  },\n  reify: {\n    make_input: (config) => ReifyInput(config),\n    description: \"materialize the table\",\n    type: \"core\",\n    get_syntax: () => `.reify()`\n  },\n  ungroup: {\n    make_input: (config) => UngroupInput(config),\n    description: \"remove groupings from data\",\n    type: \"core\",\n    get_syntax: () => `.ungroup()`\n  },\n  unorder: {\n    make_input: (config) => UnorderInput(config),\n    description: \"remove orderings from data\",\n    type: \"core\",\n    get_syntax: () => `.unorder()`\n  },\n  join: {\n    make_input: (config) => JoinInput(config),\n    description: \"join two tables\",\n    type: \"join\",\n    get_default_value: (cols) => [cols[0][0]?.label, cols[1][0]?.label],\n    get_syntax: (d) => {\n      const [left_col, right_col] = d.value;\n      return `.${d.type}(aq.from(data2), [\"${left_col}\", \"${right_col}\"])`;\n    }\n  },\n  join_left: {\n    make_input: (config) => JoinInput(config),\n    description: \"left join two tables\",\n    type: \"join\",\n    get_default_value: (cols) => [cols[0][0]?.label, cols[1][0]?.label],\n    get_syntax: (d) => {\n      const [left_col, right_col] = d.value;\n      return `.${d.type}(aq.from(data2), [\"${left_col}\", \"${right_col}\"])`;\n    }\n  },\n  join_right: {\n    make_input: (config) => JoinInput(config),\n    description: \"right join two tables\",\n    type: \"join\",\n    get_default_value: (cols) => [cols[0][0]?.label, cols[1][0]?.label],\n    get_syntax: (d) => {\n      const [left_col, right_col] = d.value;\n      return `.${d.type}(aq.from(data2), [\"${left_col}\", \"${right_col}\"])`;\n    }\n  },\n  join_full: {\n    make_input: (config) => JoinInput(config),\n    description: \"full join two tables\",\n    type: \"join\",\n    get_default_value: (cols) => [cols[0][0]?.label, cols[1][0]?.label],\n    get_syntax: (d) => {\n      const [left_col, right_col] = d.value;\n      return `.${d.type}(aq.from(data2), [\"${left_col}\", \"${right_col}\"])`;\n    }\n  },\n  semijoin: {\n    make_input: (config) => JoinInput(config),\n    description: \"return matching left rows\",\n    type: \"join\",\n    get_default_value: (cols) => [cols[0][0]?.label, cols[1][0]?.label],\n    get_syntax: (d) => {\n      const [left_col, right_col] = d.value;\n      return `.${d.type}(aq.from(data2), [\"${left_col}\", \"${right_col}\"])`;\n    }\n  },\n  antijoin: {\n    make_input: (config) => JoinInput(config),\n    description: \"return rows not in right table\",\n    type: \"join\",\n    get_default_value: (cols) => [cols[0][0]?.label, cols[1][0]?.label],\n    get_syntax: (d) => {\n      const [left_col, right_col] = d.value;\n      return `.${d.type}(aq.from(data2), [\"${left_col}\", \"${right_col}\"])`;\n    }\n  },\n  fold: {\n    make_input: (config) => FoldInput(config),\n    description: \"transform into key-value pairs\",\n    type: \"reshape\",\n    get_syntax: (d) => {\n      const fold_cols = d.value;\n      // Wrap in quotes\n      const fold_quoted = d.value.map((d) => `'${d}'`).join(\",\");\n      if (!fold_quoted) return;\n      return d.value.length > 1\n        ? `.fold([${fold_quoted}])`\n        : `.fold(${fold_quoted})`;\n    }\n  },\n\n  pivot: {\n    make_input: (config) => PivotInput(config),\n    description: \"create new columns for keys\",\n    type: \"reshape\",\n    get_syntax: (d) => {\n      const [key_col, value_col] = d.value;\n      return `.pivot(\"${key_col}\", \"${value_col}\")`;\n    }\n  },\n  spread: {\n    make_input: (config) => SpreadInput(config),\n    description: \"separate column of arrays\",\n    type: \"reshape\",\n    get_syntax: (d) => `.spread(\"${d.value}\")`\n  },\n  unroll: {\n    make_input: (config) => UnrollInput(config),\n    description: \"separate array column (rows)\",\n    type: \"reshape\",\n    get_syntax: (d) => `.unroll(\"${d.value}\")`\n  },\n  dedupe: {\n    make_input: (config) => DedupeInput(config),\n    description: \"remove duplicate rows\",\n    type: \"clean\",\n    get_syntax: (d) => {\n      if (!d.value) return \"\";\n      // Wrap in quotes\n      const deduplicate_values = d.value.map((d) => `'${d}'`).join(\",\");\n      return `.dedupe(${deduplicate_values})`;\n    }\n  },\n  impute: {\n    make_input: (config) => ImputeInput(config),\n    description: \"fill in missing values\",\n    type: \"clean\",\n    get_default_value: (cols) => [\n      cols.filter((d) => d.type === \"continuous\")[0].label,\n      \"mean\"\n    ],\n    get_syntax: (d) => {\n      const [impute_col, operation] = d.value;\n      const [quoted_name, col_ref] = impute_col.includes(\" \")\n        ? [`\"${impute_col}\"`, `[\"${impute_col}\"]`]\n        : [impute_col, `.${impute_col}`];\n      return `.impute({${quoted_name}: d => op.${operation}(d${col_ref})})`;\n    }\n  },\n\n  concat: {\n    make_input: (config) => SetInput(config),\n    description: \"append a second table\",\n    type: \"set\",\n    get_syntax: (d) => `.${d.type}(aq.from(data2))`\n  },\n\n  union: {\n    make_input: (config) => SetInput(config),\n    description: \"concat and remove duplicates\",\n    type: \"set\",\n    get_syntax: (d) => `.${d.type}(aq.from(data2))`\n  },\n\n  intersect: {\n    make_input: (config) => SetInput(config),\n    description: \"keep only matching rows\",\n    type: \"set\",\n    get_syntax: (d) => `.${d.type}(aq.from(data2))`\n  },\n  except: {\n    make_input: (config) => SetInput(config),\n    description: \"Compute table set difference\",\n    type: \"set\",\n    get_syntax: (d) => `.${d.type}(aq.from(data2))`\n  }\n})\n```\n\n```\n// Input to create a `Slice` operation\nSliceInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const lower = html`<input name=lower class=\"inline-small\" type=\"number\" value=${\n    value[0] || 0\n  } placeholder=\"start index\"/>`;\n  const upper = html`<input name=upper class=\"inline-small\" type=\"number\" value=${\n    value[1] || 10\n  }  placeholder=\"end index\"/>`;\n  const form = html`<form id=${id}>Slice: Retrieve rows between\n    ${lower}\n    and\n    ${upper}\n</form>`;\n  form.oninput = (event) => {\n    // Update the value\n    form.value = [form.lower.value, form.upper.value];\n  };\n  form.oninput({});\n  return form;\n}\n\n// Input to create a `filter` operation -- certainly the most complex input\nFilterInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  // Get column types\n  let col_data = cols;\n\n  if (col_data.length === 0)\n    return html`<div class=\"warning\"><code>filter</code> not possible: there are no categorical or continuous columns present</div>`;\n\n  const type_map = new Map(col_data.map((d) => [d.label, d.type]));\n\n  const select = make_select(\n    \"filter_col\",\n    col_data.map((d) => d.label),\n    value[0]\n  );\n\n  // Comparison operation (e.g., equal, not equal, etc.)\n  const comparisonOptions = {\n    categorical: [\n      { label: \"matches\", value: \"match\" },\n      { label: \"starts with\", value: \"startswith\" },\n      { label: \"ends with\", value: \"endswith\" },\n      { label: \"is equal to\", value: \"equal\" },\n      { label: \"is *not* equal to\", value: \"not_equal\" }\n    ],\n    continuous: [\n      { label: \"is less than\", value: \"lt\" },\n      { label: \"is greater than\", value: \"gt\" }\n    ],\n    date: [\n      { label: \"is less than\", value: \"lt\" },\n      { label: \"is greater than\", value: \"gt\" }\n    ]\n  };\n\n  // Element for selecting comparison type\n  const buildComparison = (type) => {\n    return make_select(\"comparison\", comparisonOptions[type], value[1]);\n  };\n\n  const comparison = buildComparison(type_map.get(value[0]));\n\n  const buildComparisonValue = (col) => {\n    const type = type_map.get(col);\n    let ele;\n    switch (type) {\n      case \"categorical\":\n        const inputVal = typeof value[2] === \"string\" ? value[2] : \"\"\n        ele = html`<input value=\"${\n          inputVal || \"\"\n        }\" name=comparisonValue class=\"inline\" placeholder=\"Type a value here\"/>`;\n        break;\n      case \"date\":\n      case \"continuous\":\n        const min = d3.min(options.data, (d) => +d[col]);\n        const max = d3.max(options.data, (d) => +d[col]);\n        ele = html`<input value=\"${\n          value[2] || \"\"\n        }\" min=${min} max=${max} name=comparisonValue type=\"range\" />`;\n        break;\n    }\n    return ele;\n  };\n  const comparisonValue = buildComparisonValue(value[0]);\n  const filterForm = html`<form id=${id}>Filter rows:\n    ${select}\n    ${comparison}\n    ${comparisonValue}\n</form>`;\n\n  filterForm.oninput = (event) => {\n    if (event.target && event.target.name === \"filter_col\") {\n      // Rebuild the other options\n      const new_col = filterForm.filter_col.value;\n      const type = type_map.get(new_col);\n      const new_comparison = buildComparison(type);\n      const new_comparison_value = buildComparisonValue(new_col);\n      filterForm.comparison.parentNode.replaceChild(\n        new_comparison,\n        filterForm.comparison\n      );\n      filterForm.comparisonValue.parentNode.replaceChild(\n        new_comparison_value,\n        filterForm.comparisonValue\n      );\n    }\n\n    // Update the value\n    filterForm.value = [\n      filterForm.filter_col.value,\n      filterForm.comparison.value,\n      filterForm.comparisonValue.value\n    ];\n  };\n  filterForm.oninput({});\n  return filterForm;\n}\n\n// Input to create a `Sample` operation\nSampleInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const ele = html`<input name=n_sample class=\"inline-small\" type=\"number\" placeholder=\"# of rows\" value=${\n    value[0] || 10\n  } />`;\n  const order_value = value[1] ? \"With Replacement\" : \"\";\n  const order = make_checkboxes(\n    \"replacement\",\n    [\"With Replacement\"],\n    [order_value]\n  );\n  const form = html`<form id=${id}>Sample Rows:\n    ${ele}\n    ${order}\n</form>`;\n  form.oninput = (event) => {\n    const replacement = form.replacement.checked === true ? \"replacement\" : \"\";\n    // Update the value    \n    form.value = [form.n_sample.value, replacement];    \n  };\n  form.oninput({});\n  return form;\n}\n\n// Input to create a `derive` operation\nDeriveInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const ele = html`<input name=col_name class=\"inline\" placeholder=\"New column name\" value=\"\n${\n  value[0] || \"\"\n}\" /><span>is defined as</span><input name=col_value class=\"inline\" placeholder=\"try: COLUMN + 5\" value=\"${\n    value[1] || \"\"\n  }\" \n/>`;\n\n  const form = html`<form id=${id}>Derive:\n    ${ele}\n</form>`;\n  form.oninput = (event) => {\n    // Update the value\n    form.value = [form.col_name.value, form.col_value.value];\n  };\n  form.oninput({});\n  return form;\n}\n\n// Input to create a `fold` operation\nFoldInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const labels = cols.map((d) => d.label);\n  const checkboxes = make_checkboxes(\"select\", labels, value);\n  const form = html`<form id=${id}>Fold columns:\n${checkboxes}\n</form>`;\n  form.oninput = () =>\n    (form.value = Object.keys(form.select)\n      .filter((d) => form.select[d].checked === true)\n      .map((d) => form.select[d].value));\n\n  form.oninput();\n  return form;\n}\n\n// Input to create a `join` operation\nJoinInput = ({\n  id = \"\",\n  type = \"\",\n  cols = [],\n  value = [],\n  options = {}\n} = {}) => {\n  const left_labels = cols[0].map((d) => d.label);\n  const left_select = make_select(\"left_col\", left_labels, value[0]);\n  const right_labels = cols[1].map((d) => d.label);\n  const right_select = make_select(\"right_col\", right_labels, value[1]);\n\n  // Join data input\n  const label =\n    type.includes(\"semi\") || type.includes(\"anti\")\n      ? `${capitalize(type.replace(\"join\", \"\"))} Join`\n      : type.includes(\"join_\")\n      ? `Join ${type.replace(\"join_\", \"\")}`\n      : \"Join\";\n  const form = html`<form id=${id}>${label}\n    <code>data2</code>\n    on:\n    left column ${left_select} matches right column ${right_select}\n</form>`;\n\n  // Event handling\n  form.oninput = () => {\n    form.value = [form.left_col.value, form.right_col.value];\n  };\n  form.oninput();\n  return form;\n}\n\nSpreadInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const categories = cols\n    .filter((d) => d.type === \"categorical\")\n    .map((d) => d.label);\n  const col_input = make_select(\"col\", categories, value);\n  const form = html`<form id=${id}>Spread: ${col_input}</form>`;\n\n  form.oninput = () => {\n    form.value = form.col.value;\n  };\n\n  form.oninput();\n  return form;\n}\n\nUnrollInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const categories = cols\n    .filter((d) => d.type === \"categorical\")\n    .map((d) => d.label);\n  const col_input = make_select(\"col\", categories);\n\n  const form = html`<form id=${id}>Unroll: ${col_input}</form>`;\n\n  form.oninput = () => {\n    form.value = form.col.value;\n  };\n\n  form.oninput();\n  return form;\n}\n\nPivotInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const categories = cols\n    .filter((d) => d.type === \"categorical\" || d.type === \"date\")\n    .map((d) => d.label);\n  const key_input = make_select(\"key_col\", categories, value[0]);\n  const value_input = make_select(\n    \"value_col\",\n    cols.map((d) => d.label),\n    value[1]\n  );\n  const form = html`<form id=${id}>Pivot: ${key_input} ${value_input}</form>`;\n\n  form.oninput = () => {\n    form.value = [form.key_col.value, form.value_col.value];\n  };\n  form.oninput();\n  return form;\n}\n\nImputeInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const col_input = make_select(\n    \"col\",\n    cols.filter((d) => d.type === \"continuous\").map((d) => d.label),\n    value[0]\n  );\n  const operations = [\"max\", \"mean\", \"median\", \"min\", \"mode\"];\n  const ele = make_select(\"operation\", operations, value[1]);\n  const form = html`<form id=${id}>Impute:${col_input} using the column ${ele}\n</form>`;\n  form.oninput = () => {\n    form.value = [form.col.value, form.operation.value];\n  };\n  form.oninput();\n  return form;\n}\n\n// Input to create an `rename` operation\nRenameInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const labels = cols.map((d) => d.label);\n  const select = make_select(\"col\", labels, [value[0]]);\n  const new_label = html`<input name=new_label class=\"inline\" placeholder=\"New column name\" value=\"${\n    value[1] || \"\"\n  }\"/>`;\n  const form = html`<form id=${id}>Rename:\n${select}\nto \n${new_label}\n</form>`;\n  form.oninput = () => {\n    form.value = [form.col.value, form.new_label.value];\n  };\n  form.oninput();\n  return form;\n}\n\n// Input to create an `relocate` operation\nRelocateInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const labels = cols.map((d) => d.label);\n  const selected = make_select(\"selected\", labels, value[0]);\n  const position = make_select(\"position\", [\"after\", \"before\"], value[1]);\n  const reference = make_select(\"reference\", labels, value[2]);\n  const new_label = html`<input name=new_label class=\"inline\" placeholder=\"New column name\"/>`;\n  const form = html`<form id=${id}>Relocate:\n${selected}\n${position}\n${reference}\n</form>`;\n  form.oninput = () => {\n    form.value = [\n      form.selected.value,\n      form.position.value,\n      form.reference.value\n    ];\n  };\n  form.oninput();\n  return form;\n}\n\n// Input to create an `orderby` operation\nOrderbyInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const labels = cols.map((d) => d.label);\n  const select = make_select(\"col\", labels, value[0]);\n  const order = make_checkboxes(\"order\", [\"Descending\"], [value[1]]);\n  const form = html`<form id=${id}>Order by (sort):\n${select}\n${order}\n</form>`;\n  form.oninput = () => {\n    const order = form.order.checked === true ? \"Descending\" : \"ascending\";\n    form.value = [form.col.value, order];\n  };\n  form.oninput();\n  return form;\n}\n\n// Input to create a `Rollup` operation\nRollupInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const summarizers = cols\n    .filter((d) => d.type === \"continuous\")\n    .map((d) => d.label);\n  const defaults = value[1] || [\"count\", \"mean\"];\n  const select =\n    cols.length === 0 ? \"\" : make_select(\"col\", summarizers, [value[0]]);\n  const summarize_options =\n    summarizers.length === 0\n      ? [\"count\"]\n      : [\"min\", \"max\", \"mean\", \"median\", \"sum\", \"stdev\", \"count\"];\n  const metrics = make_checkboxes(\"metric\", summarize_options, defaults);\n\n  const form = html`<form id=${id}>Rollup:\n${select}\n${metrics}\n</form>`;\n  form.oninput = () => {\n    const checked = !Object.keys(form.metric).length\n      ? form.metric.checked\n        ? [form.metric.value]\n        : \"\"\n      : Object.keys(form.metric)\n          .filter((d) => form.metric[d].checked === true)\n          .map((d) => form.metric[d].value);\n\n    const value = cols.length === 0 ? \"\" : form.col.value;\n    form.value = [value, checked];\n  };\n  form.oninput();\n  return form;\n}\n\n// Input to create an `groupby` operation\nGroupbyInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const groups = cols\n    .filter((d) => d.type === \"categorical\" || d.type === \"date\")\n    .map((d) => d.label);\n  if (groups.length === 0)\n    return html`<div class=\"warning\"><code>groupby</code> not possible: there are no categorical or date columns present</div>`;\n\n  const checkboxes = make_checkboxes(\"groups\", groups, value);\n  const form = html`<form id=${id}>Group by:\n${checkboxes}\n</form>`;\n  form.oninput = () => {\n    if (!form.groups) return;\n    const checked = !Object.keys(form.groups).length\n      ? form.groups.checked\n        ? [form.groups.value]\n        : \"\"\n      : Object.keys(form.groups)\n          .filter((d) => form.groups[d].checked === true)\n          .map((d) => form.groups[d].value);\n    form.value = checked;\n  };\n  form.oninput();\n  return form;\n}\n\n// Input to create an `ungroup` operation\nUngroupInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const form = html`<form id=${id}>Ungroup data â</form>`;\n  return form;\n}\n\n// Input to create an `reify` operation\nReifyInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const form = html`<form id=${id}>Reify Table â</form>`;\n  return form;\n}\n\n// Input to create any `set` operation\nSetInput = ({\n  id = \"\",\n  type = \"\",\n  cols = [],\n  value = [],\n  options = {}\n} = {}) => {\n  const form = html`<form id=${id}>${capitalize(\n    type\n  )} Table <code>data2</code> â</form>`;\n  return form;\n}\n\n// Input to create an `count` operation\nCountInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const form = html`<form id=${id}>Count Rows â</form>`;\n  return form;\n}\n\n// Input to create an `ungroup` operation\nUnorderInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const form = html`<form id=${id}>Unorder data â</form>`;\n  return form;\n}\n\n// Input to create a `select` operation\nSelectInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const labels = cols.map((d) => d.label);\n  const default_cols = value.length === 0 ? [labels[0]] : value;\n  const checkboxes = make_checkboxes(\"select\", labels, default_cols);\n  const form = html`<form id=${id} >Select columns:\n    ${checkboxes}\n  </form>`;\n  form.oninput = () =>\n    (form.value = Object.keys(form.select)\n      .filter((d) => form.select[d].checked === true)\n      .map((d) => form.select[d].value));\n\n  form.oninput();\n  return form;\n}\n\n// Input to create a `deduplicate` operation\nDedupeInput = ({ id = \"\", cols = [], value = [], options = {} } = {}) => {\n  const labels = cols.map((d) => d.label);\n  const checkboxes = make_checkboxes(\"select\", labels, value);\n  const form = html`<form id=${id}>Remove Duplicates:\n${checkboxes}\n</form>`;\n  form.oninput = () =>\n    (form.value = Object.keys(form.select)\n      .filter((d) => form.select[d].checked === true)\n      .map((d) => form.select[d].value));\n\n  form.oninput();\n  return form;\n}\n```\n\n```\n// Error to display if operations are dragged into an unexecutable state\ndisplay_error = (err) => {\n  let message = \"\";\n  switch (true) {\n    case err.message.includes(\"column\"):\n      message =\n        \"Your code statement is no longer valid, as it references a column that doesn't exist. This is often the result of reordering your operations, or changing a select statement. Undoing your previous operation should resolve the issue.\";\n      break;\n    case err.message.includes(\"Unexpected token\"):\n      message =\n        \"Your code statement is not valid (yet). You may simply need to fill in the options above.\";\n      break;\n    case err.message.includes(\"results\"):\n      message =\n        \"Make sure to pass an array of objects to the Wrangler() function.\";\n      break;\n    default:\n      message = \"You encountered an error: \";\n      break;\n  }\n\n  const styles = `\n    background-color:#caeaf985;\n    padding: 10px;\n    border-radius:5px;\n  `;\n\n  return html`<div style=\"${styles}\">${message}\n  <pre style=\"color:red;\">     ${err.message}\n  </pre>\n</div>`;\n}\n\n// Accepts an array of inputs ({id, type, element}) where the element is an HTML input\n// Returns the code expression captured by the input\nget_code_expression = (inputs) => {\n  let expression = `aq.from(data)`;\n  if (!inputs?.length) return expression;\n  inputs.map((d, i) => {\n    const next_line = operations[d.type].get_syntax(d);\n    if (!next_line) return;\n    expression += \"\\n\\t\" + operations[d.type].get_syntax(d);\n  });\n  return expression;\n}\n\nmake_select = (name = \"select\", options = [\"a\", \"b\"], selected = \"\") => {\n  return html`<label>\n      <select name=\"${name}\">\n        ${options.map(\n          (d) =>\n            html`<option ${\n              d === selected || d.value === selected ? \"selected\" : \"\"\n            } value=\"${d.value || d}\">${d.label || d}</option>`\n        )}\n      </select>\n    </label>`;\n}\n\nmake_checkboxes = (name = \"boxes\", options = [\"a\", \"b\"], selected = []) => {\n  return html`${options.map((d) => {\n    return `<label style=\"margin-right:5px; font-size:13px; display: inline-block;\"><input type=\"checkbox\" name=\"${name}\" value=\"${d}\" ${\n      selected.includes(d) ? \"checked\" : \"\"\n    }/>${d}</label>`;\n  })}\n`;\n}\n\nget_cols = (data) =>\n  Object.keys(data[0] || {}).map((d) => {\n    return {\n      label: d,\n      type: getType(data, d)\n    };\n  })\n\ncopy_code_button = (code_str) => {\n  return html`<div class=\"copier_wrapper\">${Copier(\n    html`${make_copy_icon()}<span style=\"vertical-align:top;\">Copy</span>`,\n    { value: code_str }\n  )}</div>`;\n}\n\n// Function to get column types\ngetType = (data, column) => {\n  for (const d of data) {\n    const value = d[column];\n    if (value == null) continue;\n    if (typeof value === \"number\") return \"continuous\";\n    if (value instanceof Date) return \"date\";\n    return \"categorical\";\n  }\n}\n\n// see unit tests in https://observablehq.com/@fil/prefixvarsinformula\nfunction prefixVarsInFormula(str, arg = \"d\", ignore = [\"aq\", \"op\"]) {\n  let shift = 0;\n  const insert = `${arg}.`;\n  for (const { type, start, end, name } of P.parseCell(str).references) {\n    if (type === \"Identifier\" && name !== arg && !ignore.includes(name)) {\n      str =\n        str.slice(0, start + shift) + insert + name + str.slice(end + shift);\n      shift += insert.length;\n    }\n  }\n  return str;\n}\n\n// A function to evaluate a string, given an object\nevaluate = (s, obj) =>\n  new Function(...Object.keys(obj), s)(...Object.values(obj))\n\n// To generate a unique ID for each input element (probably a better way to do this)\nid_generator = () => {\n  var S4 = function () {\n    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n  };\n  return \"a\" + S4() + S4();\n}\n\nformat_code = (code_str) => {\n  return html`<div class=\"code_display\" style=\"background-color:#FBF8F0; padding:10px; border-radius:5px;position:relative;width:100%;\">${md`~~~js\n${code_str}\n~~~`}`;\n}\n\ncapitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n```\n\n```\nmake_styles = () => html`<style>\n  input.inline, input.inline:focus {\n   width: auto !important;\n   min-width:0px;\n   border-top:none !important;\n   border-left:none;\n   border-right:none;\n   text-align:center;\n }\n  input.inline:focus {\n    outline-width: 0;\n  } \n  .inline-small {\n    width:75px !important;\n  }\n\n  input.inline-large, input.inline-large:focus {\n    width:171px !important;\n  }\n  \n  form {\n    display:inline;\n  }\n\n  .icon_menu_wrapper:hover {\n    border:1px solid black;\n  } \n  .icon_menu_wrapper {\n    border:1px solid white;\n    cursor:pointer;\n    margin:0px;\n    padding-bottom:5px;\n    height:40px;\n  } \n\n  .right_panel {\n    display:inline-block; \n    vertical-align:top;\n    padding-left:20px;\n    flex:1;\n    border-left:1px solid #d3d3d3;\n  }\n  .section_header {\n    font-size:20px;\n    font-weight:300;\n    border-bottom: 1px solid #d3d3d3;\n  }\n\n  .section_header a {\n    font-size:15px;\n    vertical-align:top;\n  }\n  .wrangler {\n    user-select: none;\n    font-family:var(--sans-serif);\n  }\n\n  .docs_link {\n    font-weight: 600;\n    color: #3056b2;\n    float: right;\n    line-height: 2;\n    padding-right: 21px;\n  }\n  .docs_link a {\n    color: #3056b2;\n  }\n  .copier_wrapper button {\n    background-color:#3056b2;\n    border-radius:5px;\n    color:white;\n    cursor:pointer;\n    font-weight:700;\n  }\n\n  .copier_wrapper {  \n    display:inline-block;\n  }\n\n  pre {\n    margin:0px;\n  }\n\n  .code_wrapper {\n    border-top:1px solid #d3d3d3;\n    padding-top:10px;\n  }\n\n  .event_form {\n    width:100%;\n    height:100%;\n    position:relative;\n  }\n  .prompt_action {\n    background-color:#f7f5f5;\n    height:calc(100% - 20px);\n    margin-top: 10px;\n    border-radius:5px;\n    display: flex;\n    justify-content: center; /* align horizontal */\n    align-items: center; /* align vertical */\n    color:#7892de;\n  }\n\n  .icon_menu_wrapper svg {\n    margin:3px;\n  }\n\n  .icon_info {\n    margin-top:0px; \n    font:16px system-ui,sans-serif;\n    display:inline-block; \n    white-space:pre-line;\n    line-height:8px;\n    height:40px;      \n    vertical-align:top; \n    width:176px;\n  }\n  .type_info {\n    padding:3px; \n    color:#6f6e6e;\n    display:inline-block;\n    margin-left:10px;\n    margin-right:5px;\n    border-radius:5px;\n    background-color:#e4f2f7;\n  }\n\n  .copy_instructions, .copy_instructions code {\n    font-size:11px;\n  }\n\n  .code_wrapper div                                                                {\n    display:inline-block;\n    box-sizing:border-box;\n  }\n  .copier_wrapper > form {\n    display: inline-block !important;\n    width: auto;\n  }\n\n  .copier_wrapper {\n    padding-left:15px;\n  }\n\n  .remove {\n    display: inline;\n    color: darkgrey;\n    cursor: pointer;\n    position: absolute;\n    right: 10px;\n    font-weight:600;\n    z-index:9999999;\n  }\n  .code_instructions {\n    font-size:12px;    \n    float: right;\n  }\n\n  .wrangler_container {\n    display:flex;\n    flex-direction:row;\n  }\n\n  .content {\n    position:relative;\n  }\n  .left_panel {\n    display:inline-block; \n    padding-bottom:5px;\n    padding-bottom: 10px;\n    width: 250px;\n    min-width: 250px;\n    \n  }\n  .menu_wrapper {\n    max-height: 368px;\n    overflow-y: scroll;\n  }\n  .hide_large {\n    display:none;\n  }\n\n  .warning {\n    background-color:#ffa5004d;\n    margin-right:10px;\n    border-radius:5px;\n  }\n\n  .docs_link {\n    display:flex;\n    vertical-align:bottom;\n    padding-top:6px;\n  }\n\n  /* temp fix to hide selection column */\n  .wrangler table tr td:first-child { visibility: hidden; }\n  .wrangler table tr th:first-child { width: 0; }\n  .wrangler table tr th:first-child input { visibility: hidden; }\n\n .clear_button {\n    display: inline-block;\n    border: 1px solid black;\n    padding-left: 3px;\n    padding-right: 3px;\n    border-radius: 10px;\n    margin-top: 20px;\n    position: absolute;\n    bottom: 10px;\n    cursor:pointer;\n    font-size: 12px;\n  }\n  /* Media queries */ \n  @media (max-width: 756px) {\n    .wrangler_container {\n      flex-direction:column;\n    }\n    .right_panel {\n      display:block;\n      padding-left:0px;\n      border-left:none;\n    }\n    .left_panel {\n      display:block;\n      width:100%;\n    }\n    .hide_large {\n      display:inherit;\n    }\n\n    .hide_small {\n      display:none;\n    }\n  }\n\n \n  </style>`\n```\n\n```\nmake_hamburger_icon = () => {\n  return `<svg width=\"16\" height=\"16\" viewBox=\"0 0 20 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect x=\"1\" y=\"2\" width=\"14\" height=\"2\" rx=\"0.7\" fill=\"black\"/>\n<rect x=\"1\" y=\"7\" width=\"14\" height=\"2\" rx=\"0.7\" fill=\"black\"/>\n<rect x=\"1\" y=\"12\" width=\"14\" height=\"2\" rx=\"0.7\" fill=\"black\"/>\n</svg>`;\n}\n\nmake_docs_icon = () => svg`<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M10.2 1.5L3.5 1.5C2.94772 1.5 2.5 1.94772 2.5 2.5L2.5 13.5C2.5 14.0523 2.94772 14.5 3.5 14.5L12.5 14.5C13.0523 14.5 13.5 14.0523 13.5 13.5L13.5 4.75M10.2 1.5L13.5 4.75M10.2 1.5L10.2 4.75L13.5 4.75\" stroke=\"#3056b2\" stroke-width=\"2\"/>\n<line x1=\"5.5\" y1=\"10.5\" x2=\"10.5\" y2=\"10.5\" stroke=\"#3056b2\" stroke-width=\"2\"/>\n<line x1=\"5.5\" y1=\"7.5\" x2=\"9.5\" y2=\"7.5\" stroke=\"#3056b2\" stroke-width=\"2\"/>\n</svg>`\n\nmake_copy_icon = () => svg`<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M2 9V5.89453C2 5.34225 2.44772 4.89453 3 4.89453H10C10.5523 4.89453 11 5.34225 11 5.89453V13.8945C11 14.4468 10.5523 14.8945 10 14.8945H8\" stroke=\"white\" stroke-width=\"2\"/>\n<line x1=\"4\" y1=\"10\" x2=\"4\" y2=\"16\" stroke=\"white\" stroke-width=\"2\"/>\n<path d=\"M5 3L5 2.00001L12 2C13.1046 2 14 2.89543 14 4V12H13\" stroke=\"white\" stroke-width=\"2\" stroke-linejoin=\"round\"/>\n<line x1=\"7\" y1=\"13\" x2=\"1\" y2=\"13\" stroke=\"white\" stroke-width=\"2\"/>\n</svg>\n`\n\nicons = FileAttachment(/* \"icons@4.json\" */\"https://static.observableusercontent.com/files/3c2fd71a8faeeebda50f3647621d658fd2943e8e9c4661ae86f05309b75b5569b1a6731a3058b51726f88675fa46e9b3b57be9ec5e411fd76bb415c3d7730823\").json()\n```\n\n```\nimport { Copier } from \"@mbostock/copier\"\n\n// Load the arquero function into the notebook\nimport { aq, op } from \"@uwdata/arquero\"\n\nimport {dataInput} from \"@john-guerra/file-input-with-default-value\"\n\n// https://github.com/observablehq/parser\nP = require(\"@observablehq/parser@4.4.4\")\n```\n\n```\n// Load the data (e.g., a .csv file)\ndata =  await FileAttachment(\"https://static.observableusercontent.com/files/100ba6c9ab25d7a4687eb6bc46809219508a9faf2b7ade6c7034b0490cc7709fcfca7a50f4b76fda051310f6a4898815c53a702418c3d8644f767e3a6e44ac7e\").csv({ typed: true });\n\n```\n"
    },
    "ECL Playground (.omd)": {
        "type": ".omd",
        "content": "# ECL Playground\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\n## 1 - An ECL Editor\n\n```\nviewof eclEditor = editor.ecl();\nviewof eclEditor.text(`\\\n\nLayout_Person := RECORD\n  UNSIGNED1 PersonID;\n  STRING15  FirstName;\n  STRING25  LastName;\nEND;\n\nallPeople := DATASET([ {1,'Fred','Smith'},\n                       {2,'Joe','Blow'},\n                       {3,'Jane','Smith'}],Layout_Person);\n\nsomePeople := allPeople(LastName = 'Smith');\n\n//  Outputs  ---\nsomePeople;\n`)\n```\n\n## 2 - A Submit Button\n\n```\nviewof eclToSubmit = {\n    const button = html`<button>Submit</button>`;\n    button.onclick = () => {\n        button.value = eclEditor;\n        button.dispatchEvent(new CustomEvent(\"input\"));\n    }\n    return button;\n}\n```\n\n## 3 - A HPCC Platform\n\n* **Platform**:  ${platform.url} \n\n```\nplatform = esp(\"https://play.hpccsystems.com:18010\");\nresults = platform.submit(eclToSubmit);\n```\n\n## 4 - Render results in a Table\n\n```\nviewof resultsTable = table({height:140});\nviewof resultsTable.json(results);\n``` \n"
    },
    "Five-Minute Introduction (.omd)": {
        "type": ".omd",
        "content": "# Five-Minute Introduction\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\n---\n&uarr; <i class=\"fa fa-bug fa-lg\" style=\"color:darkgray\"></i> This document is best viewed with the \"Show Developer Info\" enabled above <i class=\"fa fa-bug fa-lg\" style=\"color:darkgray\"></i> &uarr;\n\n---\n\nWelcome! This notebook gives a quick overview of \"Observable Markdown\" a mashup of the excellent [Observable HQ](https://observablehq.com) + regular Markdown.  Here follows a quick introduction to Observable.  For a more technical introduction, see [Observableâs not JavaScript](/@observablehq/observables-not-javascript). For hands-on, see our [introductory tutorial series](/collection/@observablehq/introduction). To watch rather than read, see our [short introductory video](https://www.youtube.com/watch?v=uEmDwflQ3xE)!\n\nIts also very easy to embed a value:  **${i}** inside the Markdown!!!\n\nObservable Markdown consists of a single markdown document with live \"code\" sections.\n\n```\n2 * 3 * 7\n{\n  let sum = 0;\n  for (let i = 0; i <= 100; ++i) {\n    sum += i;\n  }\n  return sum;\n}\n```\n\nCells can have names. This allows a cellâs value to be referenced by other cells.\n\n```\ncolor = \"red\";\n`My favorite color is ${color}.`\n```\n\nA cell referencing another cell is re-evaluated automatically when the referenced value changes. Try editing the definition of color above and shift-return to re-evaluate.\n\nCells can generate DOM (HTML, SVG, Canvas, WebGL, etc.). You can use the standard DOM API like document.createElement, or use the built-in html tagged template literal:\n\n```\nhtml`<span style=\"background:yellow;\">\n  My favorite language is <i>HTML</i>.\n</span>`\n```\n\nThereâs a Markdown tagged template literal, too. (This notebook is written in Markdown.)\n\n```\nmd`My favorite language is *Markdown*.`\n```\n\nDOM can be made reactive simply by referring to other cells. The next cell refers to color. (Try editing the definition of color above.)\n\n```\nhtml`My favorite color is <i style=\"background:${color};\">${color}</i>.`\n```\n\nSometimes you need to load data from a remote server, or compute something expensive in a web worker. For that, cells can be defined asynchronously using [promises](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Using_promises):\n\n```\nstatus = new Promise(resolve => {\n  setTimeout(() => {\n    resolve({resolved: new Date});\n  }, 2000);\n})\n```\n\nA cell that refers to a promise cell sees the value when it is resolved; this implicit await means that referencing cells donât care whether the value is synchronous or not. Edit the status cell above to see the cell below update after two seconds.\n\n```\nstatus\n```\n\nPromises are also useful for loading libraries from npm. Below, require returns a promise that resolves to the d3-fetch library:\n\n```\nd3 = require(\"d3-fetch@1\")\n```\n\nIf you prefer, you can use async and await explicitly (not this ):\n\n```\ncountries = (await d3.tsv(\"https://cdn.jsdelivr.net/npm/world-atlas@1/world/110m.tsv\"))\n    .sort((a, b) => b.pop_est - a.pop_est) // Sort by descending estimated population.\n    .slice(0, 10) // Take the top ten.\n```\n\nCells can be defined as [generators](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generators); a value is yielded up to sixty times a second.\n\n```\ni = {\n  let i = 0;\n  while (true) {\n    yield ++i;\n  }\n}\n`The current value of i is ${i}.`\n```\n\nAny cell that refers to a generator cell sees its current value; the referencing cell is re-evaluated whenever the generator yields a new value. As you might guess, a generator can yield promises for [async iteration](https://github.com/tc39/proposal-async-iteration); referencing cells see the current resolved value.\n\n```\ndate = {\n  while (true) {\n    yield new Promise(resolve => {\n      setTimeout(() => resolve(new Date), 1000);\n    });\n  }\n}\n```\n\nCombining these primitivesâpromises, generators and DOMâyou can build custom user interfaces. Hereâs a slider and a generator that yields the sliderâs value:\n\n```\nslider = html`<input type=range>`\nsliderValue = Generators.input(slider)\n```\n\nGenerators.input returns a generator that yields promises. The promise resolves whenever the associated input element emits an input event. You donât need to implement that generator by hand, though. Thereâs a builtin viewof operator which exposes the current value of a given input element:\n\n```\nviewof value = html`<input type=range>`\nvalue\n```\n\nYou can import cells from other notebooks. To demonstrate how custom user interfaces can expose arbitrary values to other cells, hereâs a brushable scatterplot of cars showing the inverse relationship between horsepower and fuel efficiency.\n\n```\nimport {viewof selection as cars} from \"@d3/brushable-scatterplot\";\nviewof cars;\ncars\n```\n"
    },
    "Hello World (.omd)": {
        "type": ".omd",
        "content": "# Hello World - ${mol}!\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\n* <i class=\"fa fa-arrow-right fa-lg\" style=\"color:darkgray\"></i> - Render Page (`ctrl+s`).\n* <i class=\"fa fa-download fa-lg\" style=\"color:darkgray\"></i> - Download as HTML.\n* <i class=\"fa fa-bug fa-lg\" style=\"color:darkgray\"></i> - Show Developer Info - _the live code values_.\n* Samples Drop Down - _expect frequent updates, while the plugins get updated with new functionality_\n* <i class=\"fa fa-github fa-lg\" style=\"color:darkgray\"></i> - Github Repository.\n\nVery Quick Start:\n1. Edit the Markdown on the left\n2. Click the \"Render\" <i class=\"fa fa-arrow-right fa-lg\" style=\"color:darkgray\"></i> button (or press `Ctrl+S`).\n3. Explore the samples in the drop down (top right).\n\n```\nmol = 6 * 7;  // mol - get it?\n```\n"
    },
    "Import (.omd)": {
        "type": ".omd",
        "content": "# Imports\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\nLibraries can be imported directly from [ObservableHQ](https://observablehq.com/)\n\n```\nimport {viewof selection as cars} from \"@d3/brushable-scatterplot\"\nviewof cars\nsel = JSON.stringify(cars, undefined, 2)\n```\n### Selection:\n```json\n${sel}\n```\n"
    },
    "Inline Editor Demo (.omd)": {
        "type": ".omd",
        "content": "# Inline Editor Demo\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\n* Full list of editors:\n${mdFormatted}\n\n```\nmdFormatted = Object.keys(editor).map(k => \"  * \" + k).join(\"\\n\");\n```\n\n---\n\n## ECL Editor\n_Creating widgets is always broken into two steps, this allows the content of the widget to be modified, without re-rendering the entire widget_\n\n```javascript\n// First Create ECL Editor instance\nviewof eclEditor = editor.ecl();\n\n// Next assign some text:\nviewof eclEditor.text(`a := 'aaa';`)\n\n// The current content will always be available in \"eclEditor\"\neclEditor;\n\n```\n\n```\n// First Create ECL Editor instance\nviewof eclEditor = editor.ecl();\n\n// Next assign some text:\nviewof eclEditor.text(`a := 'aaa';\\n//  TYPE HERE NOW!!!`)\n\n// The current content will always be available in \"eclEditor\"\neclEditor;\n```\nTotal characters Entered = ${eclEditor.length}.\n\n...and the actual text:\n\n```ecl\n${eclEditor}\n```\n\n---\n\n## JavaScript\n_A Javascript Editor_\n\n```\nfunction add(a, b) {\n  return a + b;\n}\nviewof js = editor.javascript();\nviewof js.text(`function add(a, b) {\n  return a + b;\n}\n\nadd(40, 2);\n`);\n```\n\n"
    },
    "Markdown Quick Reference (.omd)": {
        "type": ".omd",
        "content": "Markdown Quick Reference\n========================\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\nThis guide is a very brief overview, with examples, of the syntax that [Markdown] supports.  It is itself written in Markdown and you can copy the samples over to the left-hand pane for experimentation.  It's shown as *text* and not *rendered HTML*.\n\n[Markdown]: http://daringfireball.net/projects/markdown/\n\n\nSimple Text Formatting\n======================\n\nFirst thing is first.  You can use *stars* or _underscores_ for italics.  **Double stars** and __double underscores__ do bold.  ***Three together*** do ___both___.\n\nParagraphs are pretty easy too.  Just have a blank line between chunks of text.\n\n> This chunk of text is in a block quote.  Its multiple lines will all be\n> indended a bit from the rest of the text.\n>\n> > Multiple levels of block quotes also work.\n\nSometimes you want to include some code, such as when you are explaining how `<h1>` HTML tags work, or maybe you are a programmer and you are discussing `someMethod()`.\n\nIf you want to include some code and have\nnewlines preserved, indent the line with a tab\nor at least four spaces.\n    Extra spaces work here too.\nThis is also called preformatted text and it is useful for showing examples.\nThe text will stay as text, so any *markdown* or <u>HTML</u> you add will\nnot show up formatted.  This way you can show markdown examples in a\nmarkdown document.\n\n>     You can also use preformatted text with your blockquotes\n>     as long as you add at least five spaces.\n\n\nHeadings\n========\n\nThere are a couple of ways to make headings.  Using three or more equals signs on a line under a heading makes it into an \"h1\" style.  Three or more hyphens under a line makes it \"h2\" (slightly smaller).  You can also use multiple pound symbols before and after a heading.  Pounds after the title are ignored.  Here's some examples:\n\nThis is H1\n==========\n\nThis is H2\n----------\n\n# This is H1\n## This is H2\n### This is H3 with some extra pounds ###\n#### You get the idea ####\n##### I don't need extra pounds at the end\n###### H6 is the max\n\n\nLinks\n=====\n\nLet's link to a few sites.  First, let's use the bare URL, like <http://www.github.com>.  Great for text, but ugly for HTML.\nNext is an inline link to [Google](http://www.google.com).  A little nicer.\nThis is a reference-style link to [Wikipedia] [1].\nLastly, here's a pretty link to [Yahoo].  The reference-style and pretty links both automatically use the links defined below, but they could be defined *anywhere* in the markdown and are removed from the HTML.  The names are also case insensitive, so you can use [YaHoO] and have it link properly.\n\n[1]: http://www.wikipedia.org/\n[Yahoo]: http://www.yahoo.com/\n\nTitle attributes may be added to links by adding text after a link.\nThis is the [inline link](http://www.bing.com \"Bing\") with a \"Bing\" title.\nYou can also go to [W3C] [2] and maybe visit a [friend].\n\n[2]: http://w3c.org (The W3C puts out specs for web-based things)\n[Friend]: http://facebook.com/ \"Facebook!\"\n\nEmail addresses in plain text are not linked: test@example.com.\nEmail addresses wrapped in angle brackets are linked: <test@example.com>.\nThey are also obfuscated so that email harvesting spam robots hopefully won't get them.\n\n\nLists\n=====\n\n* This is a bulleted list\n* Great for shopping lists\n- You can also use hyphens\n+ Or plus symbols\n\nThe above is an \"unordered\" list.  Now, on for a bit of order.\n\n1. Numbered lists are also easy\n2. Just start with a number\n3738762. However, the actual number doesn't matter when converted to HTML.\n1.  This will still show up as 4.\n\nYou might want a few advanced lists:\n\n- This top-level list is wrapped in paragraph tags\n- This generates an extra space between each top-level item.\n\n- You do it by adding a blank line\n\n- This nested list also has blank lines between the list items.\n\n- How to create nested lists\n1.  Start your regular list\n2.  Indent nested lists with four spaces\n3.  Further nesting means you should indent with four more spaces\n    * This line is indented with eight spaces.\n\n- List items can be quite lengthy.  You can keep typing and either continue\nthem on the next line with no indentation.\n\n- Alternately, if that looks ugly, you can also\nindent the next line a bit for a prettier look.\n\n- You can put large blocks of text in your list by just indenting with four spaces.\n\nThis is formatted the same as code, but you can inspect the HTML\nand find that it's just wrapped in a `<p>` tag and *won't* be shown\nas preformatted text.\n\nYou can keep adding more and more paragraphs to a single\nlist item by adding the traditional blank line and then keep\non indenting the paragraphs with four spaces.  You really need\nto only indent the first line, but that looks ugly.\n\n- Lists support blockquotes\n\n> Just like this example here.  By the way, you can\n> nest lists inside blockquotes!\n> - Fantastic!\n\n- Lists support preformatted text\n\n        You just need to indent eight spaces.\n\n\nEven More\n=========\n\nHorizontal Rule\n---------------\n\nIf you need a horizontal rule you just need to put at least three hyphens, asterisks, or underscores on a line by themselves.  You can also even put spaces between the characters.\n\n---\n****************************\n_ _ _ _ _ _ _\n\nThose three all produced horizontal lines.  Keep in mind that three hyphens under any text turns that text into a heading, so add a blank like if you use hyphens.\n\nImages\n------\n\nImages work exactly like links, but they have exclamation points in front.  They work with references and titles too.\n\n![Google Logo](http://www.google.com/images/errors/logo_sm.gif) and ![Happy].\n\n[Happy]: https://s.gravatar.com/avatar/3c5e768a35943391075225aea03443a3?size=64&default=retro (\"Smiley face\")\n\n\nInline HTML\n-----------\n\nIf markdown is too limiting, you can just insert your own <strike>crazy</strike> HTML.  Span-level HTML <u>can *still* use markdown</u>.  Block level elements must be separated from text by a blank line and must not have any spaces before the opening and closing HTML.\n\n<div style='font-family: \"Comic Sans\", sans-serif;'>\nIt is a pity, but markdown does **not** work in here for most markdown parsers.  [Marked] handles it pretty well.\n</div>\n"
    },
    "Observable's not JavaScript (.omd)": {
        "type": ".omd",
        "content": "# Observableâs not JavaScript\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\n---\n&uarr; <i class=\"fa fa-bug fa-lg\" style=\"color:darkgray\"></i> This document is best viewed with the \"Show Developer Info\" enabled above <i class=\"fa fa-bug fa-lg\" style=\"color:darkgray\"></i> &uarr;\n\n---\n\nAt first glance, Observable appears to be vanilla JavaScript. This is intentional: by building on the native language of the web, Observable is more familiar and you can use the libraries you know and love, such as D3, Three, and TensorFlow. Yet for [dataflow](/@observablehq/how-observable-runs), Observable needed to change JavaScript in a few ways.\n\nHereâs a quick overview of whatâs different.\n\n(Weâve also shared our [grammar](/@observablehq/observable-grammar) and [parser](https://github.com/observablehq/parser).)\n\n### Cells are separate scripts.\n\nEach cell in a notebook is a separate script that runs independently. A syntax error in one cell wonât prevent other cells from running.\n\n```\nThis is English, not JavaScript.\n```\n\nSame with a runtime error.\n\n```\n{ throw new Error(\"oopsie\"); }\n```\n\nLikewise, local variables are only visible to the cell that defines them.\n\n```\n{ var local = \"I am a local variable.\"; }\n```\n\n### Cells run in topological order.\n\nIn vanilla JavaScript, code runs from top to bottom. Not so here; Observable runs [like a spreadsheet](/@observablehq/how-observable-runs), so you can define your cells in whatever order makes sense.\n\n```\na + 2 // a is defined below\n```\n\n```\na = 1\n```\n\nBy extension, circular definitions are not allowed.\n\n```\nc1 = c2 - 1\n```\n\n```\nc2 = c1 + 1\n```\n\n### Cells re-run when any referenced cell changes.\n\nYou donât have to run cells explicitly when you edit or interactâthe notebook updates automatically. Run the cell below by clicking the play button <svg width=\"16\" height=\"16\" class=\"db bump\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linejoin=\"round\" fill=\"none\"><path d=\"M4 3L12 8L4 13Z\"></path></svg>, or by focusing and hitting Shift-Enter. Only the referencing cells run, then *their* referencing cells, and so onâother cells are unaffected.\n\n```\nb = Math.random()\n```\n\n```\nb * b // updates automatically!\n```\n\nIf a cell allocates resources that wonât be automatically cleaned up by the garbage collector, such as an animation loop or event listener, use the [invalidation promise](/@observablehq/invalidation) to dispose of these resources manually and avoid leaks.\n\n```\n{ invalidation.then(() => console.log(\"I was invalidated.\")); }\n```\n\n### Cells implicitly await promises.\n\nYou can define a cell whose value is a promise.\n\n```\nhello = new Promise(resolve => {\n  setTimeout(() => {\n    resolve(\"hello there\");\n  }, 30000);\n})\n```\n\nIf you reference such a cell, you donât need to await; the referencing cell wonât run until the value resolves.\n\n```\nc = {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n```\n\n```\nc\n```\n\nAlso, yields occur no more than once every animation frame: typically sixty times a second, which makes generators handy for [animation](/@mbostock/animation-loops). If you yield a DOM element, it will be added to the DOM before the generator resumes.\n\n### Named cells are declarations, not assignments.\n\nNamed cells look like, and function *almost* like, assignment expressions in vanilla JavaScript. But cells can be defined in any order, so think of them as hoisted function declarations.\n\n```\nfoo = 2\n```\n\nYou canât assign the value of another cell (though see mutables below).\n\n```\n{ foo = 3; } // not allowed\n```\n\nCell names must also be unique. If two or more cells share the same name, they will all error.\n\n```\ndup = 1\n```\n\n```\ndup = 2\n```\n\n(Observable doesnât yet support destructuring assignment to declare multiple names, but we hope to add that soon.)\n\n### Statements need curly braces, and return (or yield).\n\nA cell body can be a simple expression, such as a number or string literal, or a function call. But sometimes you want statements, such as for loops. For that youâll need curly braces, and a return statement to give the cell a value. Think of a cell as a function, except the function has no arguments.\n\n```\n{\n  let sum = 0;\n  for (let i = 0; i < 10; ++i) {\n    sum += i;\n  }\n  return sum;\n}\n```\n\nFor the same reason, youâll need to wrap object literals in parentheses, or use a block statement with a return.\n\n```\nlabel = {foo: \"bar\"}\n```\n\n```\nblock = { return {foo: \"bar\"}; }\n```\n\n### Cells can be views.\n\nObservable has a special [`viewof` operator](https://observablehq.com/@observablehq/introduction-to-views) which lets you define interactive values. A view is a cell with two faces: its user interface, and its programmatic value. Try editing the input below, and note that the referencing cell runs automatically.\n\n```\nviewof text = html`<input value=\"edit me\">`\n```\n\n```\ntext\n```\n\n### Cells can be mutables.\n\nObservable has a special [`mutable` operator](/@observablehq/introduction-to-mutable-state) so you can opt-in to mutable state: you can set the value of a mutable from another cell.\n\n```\nmutable thing = 0\n```\n\n```\n++mutable thing // mutates thing\n```\n\n### Observable has a standard library.\n\nObservable provides a small [standard library](https://github.com/observablehq/stdlib/blob/trunk/README.md) for essential features, such as Markdown tagged template literals and reactive width.\n\n```\nmd`Hello, Iâm *Markdown*!`\n```\n\n### Static ES imports are not supported; use dynamic imports.\n\nSince everything in Observable is inherently dynamic, thereâs not really a need for static ES importsâthough, we might add support in the future. Note that only the most-recent browsers support dynamic imports, so you might consider using require for now.\n\n```\n_ = import(\"https://cdn.pika.dev/lodash-es/v4\")\n```\n\n```\n_.camelCase(\"lodash was here\")\n```\n\n### require is AMD, not CommonJS.\n\n[Observableâs require](/@observablehq/introduction-to-require) looks a lot like CommonJS because cells implicitly await promises. But under the hood it uses the [Asynchronous Module Definition (AMD)](https://requirejs.org/docs/whyamd.html). This convention will eventually be replaced with modern ES modules and imports, but itâs still useful for the present as many library authors are not yet shipping ES modules.\n\nWe recommend pinning major versions.\n\n```\nd3 = require(\"d3@5\")\n```\n"
    },
    "Roxie Demo (.omd)": {
        "type": ".omd",
        "content": "# Roxie Demo\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\n## Calling a Roxie Service\n_For this example we will be calling the following Roxie Service_\n\n* **baseUrl:**  \"${baseUrl}\"\n* **querySet:**  \"${querySet}\"\n* **querID:**  \"${queryID}\"\n\n```\n//  Initialize Target\nbaseUrl = \"https://play.hpccsystems.com:18002\";\nquerySet = \"roxie\";\nqueryID = \"covid19_by_us_states\";\n\n//  Initialize Roxie\nr = roxie(\"https://play.hpccsystems.com:18002\");\nq = r.query(\"roxie\", \"covid19_by_countries\");\nrequestFields = q.requestFields();\nresponseFields = q.responseFields();\n```\n\nOnce connected to the server we can query the service for its request/response schemas:\n\n* Request Schema: \n```json\n${JSON.stringify(requestFields, undefined, \"    \")}\n```\n\n* Response Schema:\n```json\n${JSON.stringify(responseFields, undefined, \"    \")}\n```\n\nAt which point we can make some actual REST requests:\n\n```javascript\nq.submit({\n    countriesfilter: \"FRANCE\"\n});\n```\n\n```\nresponse = q.submit({\n    countriesfilter: \"FRANCE\"\n});\n```\n\nActual Response:\n```json\n${JSON.stringify(response, undefined, \"    \")} \n```\n"
    },
    "Standard Library (.omd)": {
        "type": ".omd",
        "content": "# Standard Library\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\n## Visualizations\n\n### Table\n\n_The table visualization is used to display data in a spreadsheet5 like grid.  It is based on the [@hpcc-js/dgrid](../../../packages/dgrid) widget._\n\n#### Creation:\n* Type 1:\n        viewof myTable = table(...props);\n        viewof myTable.json([{col1: \"Hello\", col2:\"World\"}]);\n\n* Type 2:\n        viewof myTable = table(...props);\n        viewof myTable.json([{col1: \"Hello\", col2:\"World\"}]);\n\n\n```\nviewof myTable = table();\nviewof myTable.mulitSelect = true;\nviewof myTable.json([{col1: \"Hello 1\", col2:\"World 1\"},{col1: \"Hello 2\", col2:\"World 2\"},{col1: \"Hello 3\", col2:\"World 3\"}]);\n```\n\n${JSON.stringify(myTable)}\n\n${viewof myTable.help()}\n\n```\npalID = chart.createOrdinalPalette({Deaths:\"red\", Confirmed: \"Orange\", Confirmed: \"Green\"})\nviewof line = chart.line({title:\"By Date\", height:240, legendVisible:true, widget:{yAxisTitle:\"YYYY\", paletteID: palID}});\nviewof line.json([{col1: \"Deaths\", Deaths:22},{col1: \"Confirmed\", col2:33},{col1: \"Confirmed\", col2:44}]); \n```\n"
    },
    "Workunit Demo (.omd)": {
        "type": ".omd",
        "content": "# Workunit Demo\n\n_A [@hpcc-js/observable-md](https://github.com/hpcc-systems/Visualization/tree/trunk/packages/observable-md) demo - these demos are currently a work in progress and have dependencies which may or may not exist at any given time..._\n\n## Attach to a WU on a HPCC-Platform \n* **Platform**:  ${platform.url} \n* **WU**: ${wu.wuid}\n* **Result Count**: ${results.length}\n* **Result Names**:\n${fromattedResults}\n\n```\nplatform = esp(\"https://play.hpccsystems.com:18010\");\nwu = platform.wu(\"W20200109-161403\");\nresults = wu.results();\nfromattedResults = results.map(r => `  * ${r.name}\\n`);\n```\n\nIts easy to browse the first result **`${results[0].name}`**:\n```\nresults[0].table(); \n```\n"
    }
};
